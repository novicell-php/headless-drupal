<?php

use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Alter the list of projects to be updated by locale's interface translation.
 *
 * Locale module attempts to update the translation of those modules returned
 * by \Drupal\update\UpdateManager::getProjects(). Using this hook, the data
 * returned by \Drupal\update\UpdateManager::getProjects() can be altered or
 * extended.
 *
 * Modules or distributions that use a dedicated translation server should use
 * this hook to specify the interface translation server pattern, or to add
 * additional custom/non-Drupal.org modules to the list of modules known to
 * locale.
 * - "interface translation server pattern": URL of the .po translation files
 *   used to download the files from. The URL contains tokens which will be
 *   replaced by appropriate values.
 * The following tokens are available for the server pattern:
 * - "%core": Core version. Value example: "8.x".
 * - "%project": Project name. Value examples: "drupal", "media_gallery".
 * - "%version": Project version release. Value examples: "8.1", "8.x-1.0".
 * - "%language": Language code. Value examples: "fr", "pt-pt".
 *
 * @param array $projects
 *   Project data as returned by \Drupal\update\UpdateManager::getProjects().
 *
 * @see locale_translation_project_list()
 * @ingroup interface_translation_properties
 */
function kino_api_locale_translation_projects_alter(array &$projects) {
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('kino_api')->getPath();
  $projects['kino_api']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}

function kino_api_blocks_transform_config_alter(&$blocks) {
  $blocks = [
    'header' => [
      [
        'plugin' => 'menu',
        'id' => 'menu',
      ],
      [
        'plugin' => 'menu',
        'id' => 'meta-menu',
      ],
    ],
    'content' => [
      [
        'plugin' => 'breadcrumbs',
        'id' => 'breadcrumbs',
      ],
    ],
    'footer' => [
      [
        'plugin' => 'menu',
        'id' => 'footer',
      ],
      [
        'plugin' => 'bottom_footer',
        'id' => 'bottom_footer',
      ]
    ],
  ];
}

/**
 * Implements hook_block_transform_config_alter().
 */
function kino_api_block_transform_config__menu_alter(&$config) {
  switch ($config['plugin']) {
    case 'menu':
      $config += ['menu' => $config['id'],
        'expand_all_items' => TRUE,
        'level' => 1,
        'depth' => 9
      ];
      if ($config['id'] == 'menu') {
        $config['menu'] = 'main';
      }
      break;
  }
}

/**
 * Implements hook_entity_transform_alter().
 */
function kino_api_entity_transform_alter(&$transformation) {
  if (empty($transformation)) {
    return;
  }
  /** @var ContentEntityInterface $entity */
  $entity = $transformation['#entity'];

  /* Layout block alterations */
  if ($transformation['entity_type'] === 'block_content') {
    if ($transformation['bundle'] == 'inline_navigation') {
      $mode = 'pages';
      if (Drupal::moduleHandler()->moduleExists('content_hierarchy') && isset($transformation['field_inline_navigation_mode']) && !empty($transformation['field_inline_navigation_parent'])) {
        $mode = $entity->get('field_inline_navigation_mode')->first()->getValue()['value'];
      }
      if ($mode === 'parent') {
        $transformation['items'] = $transformation['field_inline_navigation_parent'];
        unset($transformation['field_inline_navigation_parent']);
        unset($transformation['field_inline_navigation_pages']);
      } else {
        $transformation['items'] = $transformation['field_inline_navigation_pages'];
        unset($transformation['field_inline_navigation_parent']);
        unset($transformation['field_inline_navigation_pages']);
      }
    }
  }

  /* Node alterations */
  elseif ($transformation['entity_type'] === 'node') {
    if (isset($transformation['transform_mode']) && in_array($transformation['transform_mode'], ['teaser', 'inline_navigation'])) {
      $transformation['url'] = $entity->toUrl()->toString();
    }
  }
}

/**
 * Implements hook_section_transform_alter().
 */
function kino_api_section_transform_alter(&$transformation) {
  $layout_id = $transformation['layout_id'];
  switch ($layout_id) {
    case 'layout_onecol':
      if (isset($transformation['layout_settings']['column_width']) && $transformation['layout_settings']['column_width'] == 'section--width-full') {
        $transform_mode = 'full_width';
      } elseif (isset($transformation['layout_settings']['column_width']) && $transformation['layout_settings']['column_width'] == 'section--width-narrow') {
        $transform_mode = 'width_66';
      } else {
        $transform_mode = 'width_100';
      }
      break;
    case 'layout_twocol_section':
      if (isset($transformation['layout_settings']['column_widths']) && $transformation['layout_settings']['column_widths'] == '67-33') {
        $transform_mode = 'width_66';
      } elseif (isset($transformation['layout_settings']['column_widths']) && $transformation['layout_settings']['column_widths'] == '33-67') {
        $transform_mode = 'width_33';
      } else {
        $transform_mode = 'width_50';
      }
      break;
    case 'layout_threecol_section':
      $transform_mode = 'width_33';
      break;
    default:
      $transform_mode = 'default';
      break;
  }
  foreach ($transformation['regions'] as $region => $components) {
    foreach ($components as $index => $component) {
      if ($component instanceof \Drupal\transform_api\Transform\EntityTransform) {
        $component->setValue('transform_mode', $transform_mode);
      }
    }
  }
}
